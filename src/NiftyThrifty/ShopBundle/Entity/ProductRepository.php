<?php

namespace NiftyThrifty\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * Make sure the options array has the expected fields.  If it doesn't have one
     * set the default values.
     */
    private function _verifyInputArray($options=array())
    {
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = \NiftyThrifty\ShopBundle\Entity\Product::DEFAULT_ORDER_COLUMN;
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = \NiftyThrifty\ShopBundle\Entity\Product::DEFAULT_ORDER_DIRECTION;
        }

        if (!array_key_exists('pageSize', $options)) {
            $options['pageSize'] = null;
        }

        if (!array_key_exists('pageNumber', $options)) {
            $options['pageNumber'] = null;
        }

        return $options;
    }



    /**
     * Find products all.
     */
    public function findAll($options=array())
    {
        $valid = $this->_verifyInputArray($options);

        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                   WHERE c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('sale'       => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'   => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find products count all.
     */
    public function findCountAll($options=array())
    {
        $valid = $this->_verifyInputArray($options);

        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                   WHERE c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('sale'       => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'   => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products by category.
     */
    public function findByCategory($categoryId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);

        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                  JOIN p.productCategorySize s
                  WITH s.productCategoryId = :categoryId
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('categoryId' => $categoryId,
                        'sale'       => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'   => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find count of products by category.
     */
    public function findCountByCategory($categoryId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);

        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                  JOIN p.productCategorySize s
                  WITH s.productCategoryId = :categoryId
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()';
        $params = array('categoryId' => $categoryId,
                        'sale'       => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'   => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products by the designer.
     */
    public function findByDesigner($designerId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.designerId = :designerId
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];

        $params = array('designerId' => $designerId,
                        'sale'       => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'   => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);
        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find count products by the designer.
     */
    public function findCountByDesigner($designerId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.designerId = :designerId
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()';

        $params = array('designerId' => $designerId,
                        'sale'       => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'   => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);
        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products by their size.
     */
    public function findCountBySize($sizeId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productCategorySizeId = :sizeId
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)';
        $params = array('sizeId'    => $sizeId,
                        'sale'      => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'  => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products by their size.
     */
    public function findBySize($sizeId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productCategorySizeId = :sizeId
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability = :sale OR p.productAvailability = :reserved)
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('sizeId'    => $sizeId,
                        'sale'      => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'  => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find products by the look.  (lookId was replaced by tagId)
     */
    public function findByLook($tagId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.productTags pt
                  JOIN p.collection c
                 WHERE pt.productTagId          = :tagId
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability   = :sale OR p.productAvailability = :reserved)
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('tagId'    => $tagId,
                        'sale'      => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'  => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find count of products by the look.  (lookId was replaced by tagId)
     */
    public function findCountByLook($tagId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.productTags pt
                  JOIN p.collection c
                 WHERE pt.productTagId          = :tagId
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability   = :sale OR p.productAvailability = :reserved)';
        $params = array('tagId'    => $tagId,
                        'sale'      => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'  => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products by the love
     */
    public function findByLove($userId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
//                   AND (p.productAvailability   = :sale OR p.productAvailability = :reserved)
//        $params = array('userId'    => $userId,
//                        'sale'      => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
//                        'reserved'  => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);





        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productId IN (SELECT ulp.productId
                                         FROM NiftyThrifty\ShopBundle\Entity\UserLovedProduct ulp
                                        WHERE ulp.userId = :userId
                                          AND ulp.isDeleted = 0)
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('userId'    => $userId);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find count of products by the love
     */
    public function findCountByLove($userId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT COUNT(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productId IN (SELECT ulp.productId
                                         FROM NiftyThrifty\ShopBundle\Entity\UserLovedProduct ulp
                                        WHERE ulp.userId = :userId
                                          AND ulp.isDeleted = 0)
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND (p.productAvailability   = :sale OR p.productAvailability = :reserved)
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('userId'    => $userId,
                        'sale'      => \NiftyThrifty\ShopBundle\Entity\Product::SALE,
                        'reserved'  => \NiftyThrifty\ShopBundle\Entity\Product::RESERVED);
        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products in the collection.
     */
    public function findByCollection($collectionId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                 WHERE p.collectionId = :collectionId
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('collectionId' => $collectionId);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }


    /**
     * Find products count in the collection.
     */
    public function findCountByCollection($collectionId)
    {
        $dql = 'SELECT count(p.productId) as productcount
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                 WHERE p.collectionId = :collectionId';
        $params = array('collectionId' => $collectionId);

        return $this->returnScalarResult($dql, $params);
    }


    /**
     * Find products in the collection.
     */
    public function findByCollectionForSuggest($collectionId, $options=array())
    {
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                 WHERE p.collectionId = :collectionId
                   AND p.productAvailability = :sale
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('collectionId' => $collectionId,
                        'sale'          => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find products over a certain value
     */
    public function findByPriceOver($price, $options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'asc';
        }

        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productPrice > :numberValue
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND p.productAvailability = :sale
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('numberValue'   => $price,
                        'sale'          => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find count of products over a certain value
     */
    public function findCountByPriceOver($price, $options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'asc';
        }

        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productPrice > :numberValue
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND p.productAvailability = :sale';
        $params = array('numberValue'   => $price,
                        'sale' => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products under a certain value
     */
    public function findByPriceUnder($price, $options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'asc';
        }

        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productPrice < :numberValue
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND p.productAvailability = :sale
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('numberValue'   => $price,
                        'sale'          => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }


    /**
     * Find count of products under a certain value
     */
    public function findCountByPriceUnder($price, $options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'asc';
        }

        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productPrice < :numberValue
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND p.productAvailability = :sale';
        $params = array('numberValue'   => $price,
                        'sale'          => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products on sale
     */
    public function findByPriceOld($options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'desc';
        }

        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productOldPrice > 0
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND p.productAvailability = :sale
                 ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('sale' => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }


    /**
     * Find count products on sale
     */
    public function findCountByPriceOld($options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'desc';
        }

        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productOldPrice > 0
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()
                   AND p.productAvailability = :sale';
        $params = array('sale' => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

        return $this->returnScalarResult($dql, $params);
    }

    /**
     * Find products under a certain value
     */
    public function findByTerms($terms, $options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'asc';
        }
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT p
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productAvailability = :sale
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()';
        $dql_order = 'ORDER BY p.' . $valid['orderBy'] . ' ' . $valid['orderDirection'];
        $params = array('sale' => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

		$search_term_array = explode(" ", $terms);
		if(count($search_term_array)==1){
			$term = "%" . $search_term_array[0] . "%";
			$dql .= "AND p.productName LIKE :term";
			$params['term'] = $term;
		}
		else{
			$i=0;
			foreach($search_term_array as $search_term_mult){
				$term = "%" . $search_term_array[$i] . "%";
				$termkey = "term".$i;
				$dql .= " AND p.productName LIKE :".$termkey;
				$params[$termkey] = $term;
				$i++;
			}

			//or version
			//$numberofterms = count($search_term_array);
			//$dql .= "AND (";
			//for($i=0;$i<$numberofterms;$i++){
			//	$term = "%" . $search_term_array[$i] . "%";
			//	$termkey = "term".$i;
			//	$dql .= "p.productName LIKE :".$termkey;
			//	$params[$termkey] = $term;
			//	if($i+1<$numberofterms){
			//		$dql .= " OR ";
			//	}
			//}
			//$dql .= ") ";


		}

        $dql = $dql . ' ' . $dql_order;

        return $this->runQuery($dql, $params, $valid['pageSize'], $valid['pageNumber']);
    }

    /**
     * Find count of products under a certain value
     */
    public function findCountByTerms($terms, $options=array())
    {
        // Over-ride default columns when finding by price.
        if (!array_key_exists('orderBy', $options)) {
            $options['orderBy'] = 'productPrice';
        }

        if (!array_key_exists('orderDirection', $options)) {
            $options['orderDirection'] = 'asc';
        }
        $valid = $this->_verifyInputArray($options);
        $dql = 'SELECT count(p.productId)
                  FROM NiftyThrifty\ShopBundle\Entity\Product p
                  JOIN p.collection c
                 WHERE p.productAvailability = :sale
                   AND c.collectionDateStart < CURRENT_TIMESTAMP()';
        $params = array('sale' => \NiftyThrifty\ShopBundle\Entity\Product::SALE);

		$search_term_array = explode(" ", $terms);
		if(count($search_term_array)==1){
			$term = "%" . $search_term_array[0] . "%";
			$dql .= "AND p.productName LIKE :term";
			$params['term'] = $term;
		}
		else{
			$i=0;
			foreach($search_term_array as $search_term_mult){
				$term = "%" . $search_term_array[$i] . "%";
				$termkey = "term".$i;
				$dql .= " AND p.productName LIKE :".$termkey;
				$params[$termkey] = $term;
				$i++;
			}
		}

        return $this->returnScalarResult($dql, $params);
    }
}

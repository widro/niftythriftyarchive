<?php

namespace NiftyThrifty\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserCreditRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserCreditRepository extends EntityRepository
{
    /**
     * Return the total number of credits this user has.  Returns a scalar value, not a
     * collection of objects.
     *
     */
    public function getUserCreditTotal($userId)
    {
        $dql  = 'SELECT uc
                   FROM NiftyThrifty\ShopBundle\Entity\UserCredits uc
                  WHERE uc.userId = :userId
               ORDER BY uc.userCreditsId ASC';
        $params = array('userId' => $userId);

        $credits = $this->runQuery($dql, $params);
		$total = 0;
		$oldtotalcredits = 0;
		$negativecredits = array();
		$positivecredits = array();
		$today = strtotime('now');

		$testingoutput = "";

		if(!empty($credits)){
			for($i=0;$i<$count=count($credits);$i++){
				$userCreditsDate = $credits[$i]->getUserCreditsDate()->getTimestamp();
				$userCreditsDateEnd = $credits[$i]->getUserCreditsDateEnd()->getTimestamp();
				$userCreditsValue = $credits[$i]->getUserCreditsValue();
				$user_id = $credits[$i]->getUserId();

				if($userCreditsDateEnd>$today){
					$oldtotalcredits = $oldtotalcredits + $userCreditsValue;
				}

				$thiscreditarray = array("userCreditsValue" => $userCreditsValue, "userCreditsDate" => $userCreditsDate, "userCreditsDateEnd" => $userCreditsDateEnd, "beenused" => "0");
				if($userCreditsValue<0){
					$negativecredits[] = $thiscreditarray;
				}
				else{
					$positivecredits[] = $thiscreditarray;
				}
			}

			$positivecount = count($positivecredits);
			$negativecount = count($negativecredits);

			if($negativecount>0){
				foreach($negativecredits as $creditused){

					$creditsusedtocheck = abs((int)$creditused['userCreditsValue']);
					for($i=0; $i<$positivecount; $i++){
						if(($positivecredits[$i]['beenused']=="0")&&($positivecredits[$i]['userCreditsDateEnd']>=$creditused['userCreditsDate'])){
							if($creditsusedtocheck==0){
								break;
							}
							if($positivecredits[$i]['userCreditsValue']<=$creditsusedtocheck){
								$positivecredits[$i]['beenused'] = "1";
								$testingoutput .= "used<br>";
								$creditsusedtocheck = $creditsusedtocheck - $positivecredits[$i]['userCreditsValue'];
							}
							else{
								$positivecredits[$i]['userCreditsValue'] = $positivecredits[$i]['userCreditsValue'] - $creditsusedtocheck;
								$testingoutput .= "not used<br>";
								$creditsusedtocheck = 0;
							}
						}
					}
				}
			}

			for($i=0; $i<$positivecount; $i++){
				if($positivecredits[$i]['beenused']=="0"){
					$testingoutput .= $positivecredits[$i]['userCreditsDateEnd'] . " | " . $today;
					if($positivecredits[$i]['userCreditsDateEnd']>=$today){
						$total = (int)$total + (int)$positivecredits[$i]['userCreditsValue'];
					}
				}
			}

		}

		return $total;
    }
}
